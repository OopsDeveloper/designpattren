*Template Method 패턴
템플릿 기능을 가진 패턴
즉 상위 클래스에서 처리의 뼈대를 결정하고 하위 클래스에서 구체적인 내용을 결정하는 패턴.
추상 메소드를 호출하는 방법이며 추상 메소드를 실제로 구현하는 것은 하위 클래스.
어느 하위 클래스에서 어떻게 구현하더라도 처리의 큰 흐름은 상위 클래스에서 구성한 대로 됩니다.




* 템플릿 메소드 패턴을 많이 사용하는 경우
1. 알고리즘의 구조가 고정적이고, 세부 단계만 바뀌는 경우
    • 알고리즘의 큰 틀이나 순서는 변하지 않지만, 그 내부의 세부적인 동작이 상황에 따라 달라질 필요가 있을 때 사용합니다.
2. 코드의 중복 제거와 재사용성을 높이고 싶을 때
3. 비즈니스 로직의 표준화를 유지하고 싶을 때
    • 동일한 프로세스를 따르도록 강제함으로써 일관된 로직 흐름을 보장
    • 예를 들어, 결제 처리 시스템에서 "결제 요청 → 인증 → 결제 처리 → 로그 기록" 같은 공통된 단계는 상위 클래스에서 정의하고,
      구체적인 결제 방식(신용카드, 계좌 이체 등)은 하위 클래스에서 구현
4. 확장 가능성을 고려하는 설계가 필요한 경우
    • 새로운 세부 동작을 추가하거나 변경할 때, 상위 클래스의 코드를 수정하지 않고도 하위 클래스를 통해 기능을 확장할 수 있습니다.
    • 예를 들어, 게임 엔진에서 캐릭터의 공격 방식이 다를 경우,
      공격 행동의 공통 흐름(대상 탐색 → 공격 실행 → 효과 적용)은 상위 클래스에 두고, 공격 방식은 하위 클래스에서 구현합니다.





