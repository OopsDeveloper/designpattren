* 어댑터 패턴
서로 호환되지 않는 규격의 클래스들이 각각의 코드를 수정하지 않고도
한 곳에서 같은 방식으로 사용될 수 있도록 어답터를 사용하여 연결해주는 패턴

이를 통해 규격이 다른 과거의 클래스를 끌어와서 사용하거나
서로 다른 클래스들을 묶어서 한 번의 명령으로 일괄적으로 사용할 수도 있다.

*사용하는 경우
1. 호환되지 않는 인터페이스를 연결해야 할 때
   외부 라이브러리에서 제공하는 기능이 내가 원하는 인터페이스와 다를 때

2. 레거시 코드와 새로운 시스템의 통합이 필요할 때
   레거시 코드의 변경 없이 새로운 시스템과 통합해야 하는 경우.

3. 새로운 기능을 추가할 때 기존 코드 변경을 최소화하고 싶을 때
   이미 존재하는 코드와 직접적으로 연결되면 유연성이 떨어지기 때문에 어댑터를 사용해 분리된 구조로 유지할 수 있음.



• 어떤 경우에 abstract class와 interface를 선택하나요?
 ✔ abstract class를 사용할 때
  > 공통 필드나 메서드가 필요한 경우.
  > 특정 기본 동작을 상속받아 재사용할 필요가 있는 경우.
  > 객체 상태를 관리하는 경우.
 ✔ interface를 사용할 때
  > 클래스 간의 관계를 느슨하게 하고, 다중 구현의 유연성이 필요한 경우.
  > 순수한 기능 정의를 목적으로 하는 경우.

• Adapter 패턴에서는 interface가 더 적합한가요?
 > Adapter 패턴의 목적은 호환되지 않는 인터페이스를 연결하는 것입니다.
 > Print가 단순히 메서드 선언만 포함한다면 interface로 표현하는 것이 더 명확하고 간결합니다.
 > 하지만 Print에 기본 구현이나 공통 로직이 추가될 가능성이 있다면 abstract class를 사용하는 것도 적합합니다.