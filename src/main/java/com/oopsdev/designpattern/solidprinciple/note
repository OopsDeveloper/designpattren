* SOLID
1. SRP(Single Responsibility Principle) = 단일책임원칙
 각 클래스는 하나의 임무와 목적을 갖고 만들어진다.

2. OCP(Open Closed Principle) = 개방/폐쇠 원칙
 각 클래스가 확장에는 열려 있어야 하고, 변경에는 닫혀 있어야 한다.
 인터페이스 사용
 핵심은 기존 코드를 수정하지 않고 새로운 기능을 확장할 수 있게 설계한다는 것
 기존 코드를 수정하지 않는게 좋은 이유는 안정성과 유지보수성 때문

3. LSP(Liskov Substitution Principle) = 리스코프 치환 원칙
 자식 클래스는 언제나 부모 클래스를 대체할 수 있어야 한다.
 쉽게 말하면 자식은 최소한 부모가 하는 일은 다 해야한다는 것
 부모 클래스의 객체가 들어갈 자리에 자식 클래스의 객체가 들어가도 부모 클래스가 기존에 하던 일에는 지장이 없어야 한다는 뜻
 독립된 인터페이스로 분리해서 사용하거나
 부모 자식 관계 제거후 인터페이스를 적용해 각자 별개의 클래스로 만든다

4. ISP(Interface Segregation Principle) = 인터페이스 분리 원칙
 클래스는 자신이 사용하지 않을 메소드를 구현하도록 강요받지 말아야한다.
 인터페이스도 책임에 따라 분리되어야 한다.

5. DIP(Dependency Inversion Principle) = 의존성 역전 법칙
 고수준 모듈이 저수준 모듈에 의존해서는 안된다.
 저수준: 구체적인 동작을 직접 구현
 고수준: 추상화된 로직을 제공
 인터페이스를 따로 만든 다음 고수준 모듈에서 인터페이스를 받는 속성을 만들어서 인터페이스 메소드를 내부에서 실행하게 한다
 즉 인터페이스를 거쳐서 소통되도록 만든다.

