퍼사드 패턴은 드라이브 스루로 운영되는 패스트푸드점과 같다.
그 내부 구조를 알 필요없이 창구를 통해 모든 서비스를 제공 받는다.
여러 요소들로 복잡하게 구성된 시스템을 하나의 창구를 통해 간단하게 사용하게 해주는 패턴
여러 객체를 조합해서 복합 작업 수행 / 여러 객체를 동시에 생성하고 사용 / 복잡한 서브시스템을 단순화

API같은 경우 퍼사드 패턴이 좋은 경우이다.

API와 퍼사드 패턴의 궁합이 좋은 이유
1.복잡성 숨기기
API는 여러 하위 시스템, 다양한 로직이나 기능 호출을 감싸서 제공할 필요가 있습니다.
이때 퍼사드 패턴을 사용하면 클라이언트가 복잡한 내부 구현을 몰라도 단순한 API 호출만으로 기능을 사용할 수 있습니다.

2.단일 진입점 제공
퍼사드 패턴은 단일 인터페이스를 제공하기 때문에 API 사용자 입장에서 명확하고 직관적인 구조를 만들 수 있습니다.
예: 하나의 API 호출이 내부적으로 여러 시스템 호출이나 복잡한 로직을 처리.

3.유지 보수와 변경 용이
하위 시스템이 바뀌어도 API(퍼사드)를 통해 호출하는 클라이언트 코드에는 영향을 주지 않으므로 유지 보수에 유리합니다.

4.결합도 감소
API 클라이언트는 하위 시스템에 직접 접근하지 않으므로 결합도가 낮아지고 시스템 유연성이 향상됩니다.