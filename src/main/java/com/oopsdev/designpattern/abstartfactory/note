* 추상 팩토리 패턴
클래스의 인스턴스를 생성하는 부분을 분리한다는 점에서 팩토리 메소드 패턴과 유사.
팩토리 메소드 패턴이 단일 제품의 생성을 다루는 반면 추상 팩토리 패턴은 관련 제품의 그룹, 즉 제품군의 생성에 관한 패턴이라는 점.
추상 팩토리 클래스를 사용하여 서로 관련된 객체들의 제품군을 일관된 방식으로 생성하고
구체적인 클래스에 의존하지 않도록 하여 유연성과 확장성을 높일 수 있습니다.

*gpt
추상 팩토리 패턴은 관련된 객체들의 집합을 생성하는 인터페이스를 제공하는 디자인 패턴이다.
팩토리 메서드 패턴이 단일 객체 생성을 위한 패턴이라면, 추상 팩토리 패턴은 서로 관련된 객체를 그룹화하여 일관되게 생성하는 데 사용된다.

-구조
AbstractFactory (추상 팩토리): 구체적인 팩토리들의 공통 인터페이스 정의
ConcreteFactory (구체 팩토리): AbstractFactory를 구현하여 구체적인 제품 생성
AbstractProduct (추상 제품): 제품군의 공통 인터페이스 정의
ConcreteProduct (구체 제품): AbstractProduct를 구현하여 실제 인스턴스 생성
Client (클라이언트 코드): 팩토리를 사용하여 객체를 생성하는 코드


*사용하는 경우
1.UI 라이브러리 개발
크로스 플랫폼 애플리케이션에서 Windows, macOS, Linux 등 환경에 따라 다른 UI 컴포넌트(버튼, 체크박스 등)를 생성할 때 사용된다.
예: Java의 Swing (Look and Feel) 구현 방식

2.Spring BeanFactory 및 DI 컨테이너
BeanFactory와 ApplicationContext가 다양한 Bean을 생성할 때 추상 팩토리 패턴을 사용
@Bean, @Component 등을 활용하여 유연한 객체 생성을 가능하게 함

3.데이터베이스 연결 및 DAO 패턴
다양한 DBMS(MySQL, Oracle, PostgreSQL)에 대해 각기 다른 DAO 구현체를 생성할 때 활용
인터페이스를 통해 DB 유형을 감추고, Factory를 이용하여 데이터 접근 객체를 생성

4.테마 및 스킨 시스템
웹사이트나 게임에서 다양한 테마(예: Light/Dark 모드)에 따라 UI 요소가 변경될 때 적용 가능
특정 팩토리를 선택하여 테마에 맞는 UI 요소를 생성

5.게임 개발
서로 다른 유형의 캐릭터(예: 엘프, 오크, 인간)를 만들면서 각 캐릭터에 맞는 무기, 방어구를 팩토리로 생성하는 데 사용


✅ 장점
객체 간 일관성 유지: 관련된 객체들을 그룹화하여 일관되게 생성 가능
유연성 증가: 새로운 제품 계열을 추가할 때 기존 코드를 수정하지 않고 확장 가능
캡슐화: 클라이언트 코드에서 객체 생성 로직을 분리하여 유지보수성을 높임

❌ 단점
구조가 복잡해질 수 있음: 제품군이 많아질수록 팩토리 클래스를 많이 생성해야 하므로 코드가 증가
초기 설계가 필요함: 제품군이 확정되지 않은 경우, 팩토리 패턴이 오히려 유연성을 감소시킬 수 있음